Design code
module mux_dff_loop (
    input wire clk,
    input wire i1,
    input wire s,
    output wire y
);
    wire dff_out;
    
    // MUX
    assign y = (s == 1'b0) ? dff_out : i1;

    // D Flip-Flop
    reg q;
    always @(posedge clk) begin
        q <= y;  // y is the mux output
    end

    assign dff_out = q;

endmodule

Testbench
module tb_mux_dff_loop;
    reg clk;
    reg i1;
    reg s;
    wire y;

    // Instantiate the design
    mux_dff_loop uut (
        .clk(clk),
        .i1(i1),
        .s(s),
        .y(y)
    );

    // Clock generator
    always #5 clk = ~clk;

    initial begin
        // Initialize
        clk = 0;
        i1 = 0;
        s = 0;

        // Monitor values
        $monitor("Time=%0t | clk=%b s=%b i1=%b | y=%b", $time, clk, s, i1, y);

        // Test sequence
        #10 s = 1; i1 = 1;
        #10 s = 0;
        #10 s = 1; i1 = 0;
        #10 s = 0;
        #10 s = 1; i1 = 1;
        #10 s = 0;
        #20;

        $finish;
    end
endmodule
